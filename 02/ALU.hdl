// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Zero X
    Mux16(a=x, b[0..15]=false, sel=zx, out=zerox);
    // Not X
    Not16(in=zerox, out=ntx);
    Mux16(a=zerox, b=ntx, sel=nx, out=notx);
    // Zero Y
    Mux16(a=y, b[0..15]=false, sel=zy, out=zeroy);
    // Not Y
    Not16(in=zeroy, out=nty);
    Mux16(a=zeroy, b=nty, sel=ny, out=noty);
    // F
    Add16(a=notx, b=noty, out=xplusy);
    And16(a=notx, b=noty, out=xandy);
    Mux16(a=xandy, b=xplusy, sel=f, out=fout);
    // Negate Output
    Not16(in=fout, out=nfout);
    Mux16(a=fout, b=nfout, sel=no, out=out, out[0..7]=o1, out[8..15]=o2, out=o);
    // Zero Output
    Or8Way(in=o1, out=o1a);
    Or8Way(in=o2, out=o2a);
    Or(a=o1a, b=o2a, out=z);
    Not(in=z, out=zr);
    // Negative Output
    And16(a=o, b[15]=true, out[15]=ng);

}